# For more information about tox, see https://tox.readthedocs.io/en/latest/
[tox]
minversion = 3.20.1
envlist =
    lint
    packaging
    py
    py-{devel}

skipsdist = True
isolated_build = True

[testenv]
description =
    Unit testing
# both options needed to workaround https://github.com/tox-dev/tox/issues/2197
usedevelop = False
skip_install = True
# download assures tox gets newest pip, see https://github.com/tox-dev/tox/issues/791
download = true
deps =
    --editable .[docker,podman]
    # git+https://github.com/ansible/ansible.git#egg=ansible
    # do not make ansible a runtime dependency, keep it specific to tox
    ansible-core >= 2.11
    ansible-lint
    # https://github.com/ansible-community/molecule-containers/pull/32
    filelock
    !devel: molecule[test] >= 3.6.0
    devel: git+https://github.com/ansible-community/molecule#egg=molecule[test]
    devel: git+https://github.com/ansible-community/molecule-docker#egg=molecule-docker
    devel: git+https://github.com/ansible-community/molecule-podman#egg=molecule-podman
commands =
    pip check
    # TODO: investigate why we need to do this:
    ansible-galaxy collection install containers.podman
    ansible-galaxy collection install ansible.posix
    pytest --collect-only
    pytest --color=yes {tty:-s}
setenv =
    ANSIBLE_FORCE_COLOR={env:ANSIBLE_FORCE_COLOR:1}
    ANSIBLE_INVENTORY={toxinidir}/tests/hosts.ini
    ANSIBLE_CONFIG={toxinidir}/ansible.cfg
    ANSIBLE_NOCOWS=1
    ANSIBLE_RETRY_FILES_ENABLED=0
    ANSIBLE_VERBOSITY={env:ANSIBLE_VERBOSITY:0}
    PIP_DISABLE_PIP_VERSION_CHECK=1
    PY_COLORS={env:PY_COLORS:1}
    PRE_COMMIT_COLOR=always
    # pip: Avoid 2020-01-01 warnings: https://github.com/pypa/pip/issues/6207
    PYTHONWARNINGS=ignore:DEPRECATION::pip._internal.cli.base_command
    PYTHONDONTWRITEBYTECODE=1
    # This should pass these args to molecule, no effect here as this is the default
    # but it validates that it accepts extra params.
    MOLECULE_OPTS=--destroy always
passenv =
    CI
    CURL_CA_BUNDLE
    DOCKER_*
    HOME
    PYTEST_*
    REQUESTS_CA_BUNDLE
    SSH_AUTH_SOCK
    SSL_CERT_FILE
    TOXENV
    TRAVIS
    TRAVIS_*
    TWINE_*
    ZUUL*
whitelist_externals =
    bash
    twine
    pytest
    pre-commit
    sh

[testenv:packaging]
usedevelop = false
skip_install = true
deps =
    build >= 0.5.1
    twine >= 3.4.2
commands =
    bash -c "rm -rf {toxinidir}/dist/ && mkdir -p {toxinidir}/dist/"
    python -m build \
      --outdir {toxinidir}/dist/ \
      {toxinidir}
    # metadata validation
    sh -c "python -m twine check {toxinidir}/dist/*"

[testenv:lint]
description = Performs linting, style checks
skip_install = true
sitepackages = false
deps =
    pre-commit
commands =
    pre-commit run -a
